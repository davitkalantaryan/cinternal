

// see: https://stackoverflow.com/questions/24355344/inject-shared-library-into-a-process
#ifndef _GNU_SOURCE
#define  _GNU_SOURCE
#endif
#ifndef __USE_GNU
#define  __USE_GNU
#endif
#include <dlfcn.h>
#include <sys/ptrace.h>
#include <sys/user.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/syscall.h>
#include <string.h>
#include <errno.h>
#include <stdio.h>
#include <unistd.h>

#define DLL_TO_LOAD "libtest_lib01.so"

bool WriteDataToProcess(int a_pid, unsigned long a_addr, const unsigned char* a_data, size_t a_dataLen)
{
    size_t itr;
    const size_t itersCount = a_dataLen / 8;

    for(itr=0;itr<itersCount;++itr){
        if (ptrace(PTRACE_POKETEXT, (pid_t)a_pid, (void *)(a_addr + 8*itr), (void *)(a_data + 8*itr))){
            return false;
        }
    }

    itr = a_dataLen % 8;
    if(itr){
        long data = 0;
        memcpy(&data, a_data + 8*itr, itr);
        if (ptrace(PTRACE_POKETEXT, (pid_t)a_pid, (void *)(a_addr + 8*itr), data)){
            return false;
        }
    }

    return true;
}

int main(int argc, char *argv[])
{
    struct user_regs_struct oldregs, regs;
    unsigned long  pid, addr, fn_addr, data_addr;
    siginfo_t      info;
    char           dummy;
    size_t itr, strLenPlus1, strLenFinal;
    unsigned char vcLibName[1024];

    const unsigned char injectCodeRaw[] = {
        0x48, 0xC7, 0xC0, 0x00, 0x00, 0x00, 0x00,  // mov rax, 0x0
        0x48, 0x8D, 0x34, 0x24,                    // lea rsi, [rsp]
        0x48, 0x89, 0xC7,                          // mov rdi, rax
        0x48, 0x89, 0xE8,                          // mov rax, rbp
        0x48, 0x83, 0xEC, 0x08,                    // sub rsp, 0x8
        0x50,                                      // push rax
        0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00,  // mov rax, <dlopen address>
        0x00, 0x00, 0x00,
        0xFF, 0xD0,                                // call rax
        0x48, 0x83, 0xC4, 0x10,                    // add rsp, 0x10
        0xC3                                       // ret
    };
    const size_t injectCodeSizeRaw = sizeof(injectCodeRaw);
    const size_t injectCodeSize = ((injectCodeSizeRaw/8)+1)*8;
    size_t itersCount;
    unsigned long save[1024];
    unsigned char injectCode[injectCodeSize];

    memcpy(injectCode,injectCodeRaw,injectCodeSizeRaw);

    strLenPlus1 = strlen(DLL_TO_LOAD) + 1;
    memcpy(vcLibName,DLL_TO_LOAD,strLenPlus1);
    strLenFinal = ((strLenPlus1/8)+1)*8;

    itersCount = (strLenFinal + injectCodeSize)/8;

    if (argc != 3 || !strcmp(argv[1], "-h") || !strcmp(argv[1], "--help")) {
        fprintf(stderr, "\n");
        fprintf(stderr, "Usage: %s [ -h | --help ]\n", argv[0]);
        fprintf(stderr, "       %s PID ADDRESS\n", argv[0]);
        fprintf(stderr, "\n");
        return 1;
    }

    if (sscanf(argv[1], " %lu %c", &pid, &dummy) != 1 || pid < 1UL) {
        fprintf(stderr, "%s: Invalid process ID.\n", argv[1]);
        return 1;
    }

    if (sscanf(argv[2], " %lx %c", &addr, &dummy) != 1) {
        fprintf(stderr, "%s: Invalid address.\n", argv[2]);
        return 1;
    }
    if (addr & 7) {
        fprintf(stderr, "%s: Address is not a multiple of 8.\n", argv[2]);
        return 1;
    }

    fn_addr= addr;
    data_addr = addr + injectCodeSize;

    /* Attach to the target process. */
    if (ptrace(PTRACE_ATTACH, (pid_t)pid, NULL, NULL)) {
        fprintf(stderr, "Cannot attach to process %lu: %s.\n", pid, strerror(errno));
        return 1;
    }

    /* Wait for attaching to complete. */
    waitid(P_PID, (pid_t)pid, &info, WSTOPPED);

    /* Get target process (main thread) register state. */
    if (ptrace(PTRACE_GETREGS, (pid_t)pid, NULL, &oldregs)) {
        fprintf(stderr, "Cannot get register state from process %lu: %s.\n", pid, strerror(errno));
        ptrace(PTRACE_DETACH, (pid_t)pid, NULL, NULL);
        return 1;
    }

    /* Save the bytes at the specified address in the target process. */
    for(itr=0;itr<itersCount;++itr){
        save[itr] = ptrace(PTRACE_PEEKTEXT, (pid_t)pid, (void *)(addr + itr*8), NULL);
    }


    /* Replace the bytes */
    if(!WriteDataToProcess(pid,fn_addr,injectCode,injectCodeSize)){
        ptrace(PTRACE_DETACH, (pid_t)pid, NULL, NULL);
        return 1;
    }
    if(!WriteDataToProcess(pid,data_addr,vcLibName,strLenFinal)){
        ptrace(PTRACE_DETACH, (pid_t)pid, NULL, NULL);
        return 1;
    }

    /* Modify process registers, to execute the just inserted code. */
    regs = oldregs;
    regs.rip = (unsigned long long int)fn_addr;
    regs.rdi = (unsigned long long int)data_addr;
    regs.rsi = (unsigned long long int)RTLD_NOW;
    if (ptrace(PTRACE_SETREGS, (pid_t)pid, NULL, &regs)) {
        fprintf(stderr, "Cannot set register state from process %lu: %s.\n", pid, strerror(errno));
        ptrace(PTRACE_DETACH, (pid_t)pid, NULL, NULL);
        return 1;
    }

    /* Do the syscall. */
    if (ptrace(PTRACE_SINGLESTEP, (pid_t)pid, NULL, NULL)) {
        fprintf(stderr, "Cannot execute injected code to process %lu: %s.\n", pid, strerror(errno));
        ptrace(PTRACE_DETACH, (pid_t)pid, NULL, NULL);
        return 1;
    }

    /* Wait for the client to execute the syscall, and stop. */
    waitid(P_PID, (pid_t)pid, &info, WSTOPPED);

    /* Revert the bytes we modified. */
    for(itr=0;itr<itersCount;++itr){
        if (ptrace(PTRACE_POKETEXT, (pid_t)pid, (void *)(addr + 8*itr), (void *)save[itr])){
            fprintf(stderr, "Cannot revert process %lu code modifications: %s.\n", pid, strerror(errno));
            ptrace(PTRACE_DETACH, (pid_t)pid, NULL, NULL);
            return 1;
        }
    }

    /* Revert the registers, too, to the old state. */
    if (ptrace(PTRACE_SETREGS, (pid_t)pid, NULL, &oldregs)) {
        fprintf(stderr, "Cannot reset register state from process %lu: %s.\n", pid, strerror(errno));
        ptrace(PTRACE_DETACH, (pid_t)pid, NULL, NULL);
        return 1;
    }

    /* Detach. */
    if (ptrace(PTRACE_DETACH, (pid_t)pid, NULL, NULL)) {
        fprintf(stderr, "Cannot detach from process %lu: %s.\n", pid, strerror(errno));
        return 1;
    }

    fprintf(stderr, "Done.\n");

    return 0;
}
